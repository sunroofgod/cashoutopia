playerCards:
[card:number|string, suit: <IconType/>, black:boolean][]

if multiplayer-->BlackJackTable needs to have slotIDs

playerCards --> associated with a playerID & handID

playerHand =
{
  cards: [card:number|string, suit: <IconType/>, black:boolean][],
  handID: number,
  betAmount: number,
  outcome: number (-1 = Lose, 0 = Draw, 1 = Win, 2 = Ongoing)
}
Player = 
{
  hands: playerHand[],
  playerID: string,
}

?? How do I handle the generation of Player Objects?
-[]

on SetBet --> 
  - Create playerCards Object
  - Create Player Object if does not exist?
    - then insert playerCards into Player
  - Based on the Actions --> Adjust hand in playerCards
  END OF GAME (what is end of game? when playerGameCondition for the hand <= 1?) 
  - deduct/add money through loop on
  - set Player playercards = [] (only if SetBet is pressed again) 

on Split:
  --> if first hand busts --> shownDealerCards doesn't occur
  --> 

PLAYER = {
  name: number,
  playerID: string,
  email: string,
  hashedPassword: string,
}

Player.tsx --> has to loop through all the player's playerCards instances 
  --> internal loop will be what it is rn

After this have to handle Hit, Stand, Double & Win/Lose/Draw condition is now tied to (handID, playerID)

Register account ->

playerCards =
{
  hand: [card:number|string, suit: <IconType/>, black:boolean][],
  handID: number,
  betAmount: number,
  outcome: number (-1 = Lose, 0 = Draw, 1 = Win, 2 = Ongoing)
}

e.g.
hand: [[3, <IconType/>, true], [[3, <IconType/>, true]]]

on Split: --> only occur if playerCards.hands[0][0] === playerCards.hands[1][0]:
  --> have to instantly deduct money from the guy
  createNewHandArray --> 
  let newHand = []
  newHand.push(hand.pop())
  let newPlayerCards = {hand:newHand, handID:GenerateNewHandID(), betAmount:betAmount, outcome: 2}
  Player.cards.push(newPlayerCards)